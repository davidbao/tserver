//**************************************
// Generated by mcpp translator
// Version 1.2
//**************************************

#ifndef __ODB_NET_M_H__
#define __ODB_NET_M_H__

#include"mcode/mvector.h"
#include"mcode/mstring.h"
#include"mcode/mstream.h"
#include"mcode/mclient.h"

namespace RTDB_SERVER
{
const short C_DATATYPE_STRING = 1;
const short C_DATATYPE_UCHAR = 2;
const short C_DATATYPE_SHORT = 3;
const short C_DATATYPE_INT = 4;
const short C_DATATYPE_DATETIME = 5;
const short C_DATATYPE_FLOAT = 6;
const short C_DATATYPE_DOUBLE = 7;
const short C_DATATYPE_KEYID = 8;
const short C_DATATYPE_BINARY = 9;
const short C_DATATYPE_TEXT = 10;
const short C_DATATYPE_IMAGE = 11;
const short C_DATATYPE_APPKEYID = 12;
const short C_DATATYPE_APPID = 13;
const short C_DATATYPE_UINT = 14;
const short C_DATATYPE_LONG = 15;
typedef MLang::VECTOR<MLang::STRING> SEQ_STRING;
typedef MLang::VECTOR<char> SEQ_CHAR;
typedef MLang::VECTOR<float> SEQ_FLOAT;
typedef MLang::VECTOR<int> SEQ_LONG;
typedef MLang::VECTOR<MLang::Long> SEQ_LONGLONG;
typedef MLang::Long KEYID_STRUCT;
struct APPKEY_STRUCT
{
	int	app_id;
	KEYID_STRUCT	key_id;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef APPKEY_STRUCT APPID_STRUCT;
struct KEYID_STATUS_STRUCT
{
	KEYID_STRUCT	key_id;
	short	status;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<KEYID_STRUCT> SEQ_KEY_ID;
typedef MLang::VECTOR<APPKEY_STRUCT> SEQ_APPKEY_ID;
typedef MLang::VECTOR<APPID_STRUCT> SEQ_APP_ID;
typedef MLang::VECTOR<KEYID_STATUS_STRUCT> SEQ_KEY_ID_STA;
struct union_data_type
{
private:
	union
	{
		char*	c_char;
		unsigned char	c_uchar;
		short	c_short;
		int	c_int;
		MLang::Long	c_time;
		float	c_float;
		double	c_double;
		KEYID_STRUCT	c_keyid;
		SEQ_CHAR*	c_binary;
		SEQ_CHAR*	c_text;
		SEQ_CHAR*	c_image;
		APPKEY_STRUCT	c_appkeyid;
		APPID_STRUCT	c_appid;
		unsigned int	c_uint;
		MLang::Long	c_long;
	}__u_val;
	bool __u_init;
	unsigned short __u_index;
public:
	union_data_type();
	~union_data_type();
	union_data_type(const union_data_type&);
	union_data_type&operator=(const union_data_type&);
	short _d()const;
	void __clear();
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
	void c_char(const char*);
	void	c_char(const MLang::STRING&);
	const char*c_char()const;
	void c_uchar(const unsigned char);
	const unsigned char	c_uchar()const;
	void c_short(const short);
	const short	c_short()const;
	void c_int(const int);
	const int	c_int()const;
	void c_time(const MLang::Long);
	const MLang::Long	c_time()const;
	void c_float(const float);
	const float	c_float()const;
	void c_double(const double);
	const double	c_double()const;
	void c_keyid(const KEYID_STRUCT);
	const KEYID_STRUCT	c_keyid()const;
	void c_binary(const SEQ_CHAR&);
	const SEQ_CHAR&c_binary()const;
	SEQ_CHAR&c_binary();
	void c_text(const SEQ_CHAR&);
	const SEQ_CHAR&c_text()const;
	SEQ_CHAR&c_text();
	void c_image(const SEQ_CHAR&);
	const SEQ_CHAR&c_image()const;
	SEQ_CHAR&c_image();
	void	c_appkeyid(const APPKEY_STRUCT&);
	const	APPKEY_STRUCT&c_appkeyid()const;
	APPKEY_STRUCT&c_appkeyid();
	void	c_appid(const APPID_STRUCT&);
	const	APPID_STRUCT&c_appid()const;
	APPID_STRUCT&c_appid();
	void c_uint(const unsigned int);
	const unsigned int	c_uint()const;
	void c_long(const MLang::Long);
	const MLang::Long	c_long()const;
};
typedef MLang::VECTOR<union_data_type> SEQ_COMMON_DATA;
struct TABLE_STRU
{
	int	table_no;
	short	app_no;
	short	column_num;
	MLang::STRING	table_name_eng;
	MLang::STRING	table_name_chn;
	short	record_length;
	int	record_num;
	int	max_record_num;
	unsigned char	is_auto_generate;
	unsigned char	is_record_app;
	TABLE_STRU();
	TABLE_STRU(const TABLE_STRU&);
	TABLE_STRU&operator=(const TABLE_STRU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct COLUMN_STRU
{
	short	field_no;
	MLang::STRING	field_name_eng;
	MLang::STRING	field_name_chn;
	short	data_length;
	unsigned char	data_type;
	unsigned char	allow_null;
	unsigned char	is_display;
	unsigned char	display_type;
	short	display_length;
	unsigned char	display_precision;
	MLang::STRING	menu_name;
	unsigned char	reference_flag;
	unsigned char	is_key;
	unsigned char	is_index;
	unsigned char	sort_order_no;
	unsigned char	reference_display;
	unsigned char	is_input;
	unsigned char	is_fix;
	MLang::STRING	init_value;
	MLang::STRING	min_value;
	MLang::STRING	max_value;
	int	reference_table;
	short	reference_column;
	int	column_special;
	COLUMN_STRU();
	COLUMN_STRU(const COLUMN_STRU&);
	COLUMN_STRU&operator=(const COLUMN_STRU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<COLUMN_STRU> SEQ_COLUMN_INFO;
struct REQ_STDB_CREATE
{
	TABLE_STRU	table_info;
	SEQ_COLUMN_INFO	column_info;
	SEQ_COMMON_DATA	data_value;
	REQ_STDB_CREATE();
	REQ_STDB_CREATE(const REQ_STDB_CREATE&);
	REQ_STDB_CREATE&operator=(const REQ_STDB_CREATE&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_STDB_DELETE
{
	short	app_no;
	int	table_no;
	MLang::STRING	passwd;
	REQ_STDB_DELETE();
	REQ_STDB_DELETE(const REQ_STDB_DELETE&);
	REQ_STDB_DELETE&operator=(const REQ_STDB_DELETE&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct TABLE_PARAMETER
{
	MLang::STRING	table_name_eng;
	MLang::STRING	table_name_chn;
	int	table_no;
	int	key_len;
	int	subkey_num;
	short	field_sum;
	int	record_number;
	int	record_size;
	unsigned char	is_auto_generated;
	TABLE_PARAMETER();
	TABLE_PARAMETER(const TABLE_PARAMETER&);
	TABLE_PARAMETER&operator=(const TABLE_PARAMETER&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct FIELD_PARAMETER
{
	short	field_no;
	short	r_field_no;
	short	field_id;
	short	column_id;
	MLang::STRING	field_name_eng;
	MLang::STRING	field_name_chn;
	short	field_length;
	unsigned char	data_type;
	unsigned char	allow_null;
	unsigned char	display_type;
	MLang::STRING	menu_name;
	unsigned char	reference_flag;
	unsigned char	is_keyword;
	unsigned char	is_index;
	int	offset;
	int	check_tag;
	unsigned char	sort_order_no;
	unsigned char	reference_mode;
	unsigned char	reference_display;
	unsigned char	is_app_syn;
	unsigned char	auto_meas_type;
	MLang::STRING	default_asciival;
	MLang::STRING	min_asciival;
	MLang::STRING	max_asciival;
	int	ref_tableno;
	short	ref_fieldno;
	int	column_special;
	int	search_attribute;
	int	statics_attribute;
	int	reserved_1;
	int	reserved_2;
	int	reserved_3;
	int	reserved_4;
	int	reserved_5;
	FIELD_PARAMETER();
	FIELD_PARAMETER(const FIELD_PARAMETER&);
	FIELD_PARAMETER&operator=(const FIELD_PARAMETER&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct R_FIELD_BASE_INFO
{
	int	offset;
	int	field_length;
	short	field_no;
	unsigned char	data_type;
	unsigned char	is_keyword;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<R_FIELD_BASE_INFO> SEQ_FIELD_BASE_INFO;
struct FIELD_STRU
{
	short	field_no;
	short	field_type;
	short	field_length;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<FIELD_STRU> SEQ_FIELD_STRU;
struct REQ_BASE
{
	short	context_no;
	int	app_no;
	int	table_no;
	char	byte_tag;
	SEQ_FIELD_STRU	seq_field;
	REQ_BASE();
	REQ_BASE(const REQ_BASE&);
	REQ_BASE&operator=(const REQ_BASE&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_READ
{
	REQ_BASE	base_info;
	SEQ_CHAR	seq_keyword;
	int	keybuf_size;
	MLang::STRING	str_fname_list;
	REQ_READ();
	REQ_READ(const REQ_READ&);
	REQ_READ&operator=(const REQ_READ&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_READ
{
	int	record_num;
	int	record_size;
	short	field_num;
	SEQ_FIELD_STRU	seq_field;
	SEQ_CHAR	seq_data;
	int	data_size;
	RSP_READ();
	RSP_READ(const RSP_READ&);
	RSP_READ&operator=(const RSP_READ&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_KEY_WRITE
{
	REQ_BASE	base_info;
	SEQ_CHAR	record_value;
	int	buf_size;
	REQ_KEY_WRITE();
	REQ_KEY_WRITE(const REQ_KEY_WRITE&);
	REQ_KEY_WRITE&operator=(const REQ_KEY_WRITE&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_MODIFY
{
	REQ_BASE	base_info;
	short	is_field_name;
	MLang::STRING	field_name_str;
	SEQ_CHAR	seq_keyword;
	int	keybuf_size;
	SEQ_CHAR	field_value;
	int	buf_size;
	REQ_MODIFY();
	REQ_MODIFY(const REQ_MODIFY&);
	REQ_MODIFY&operator=(const REQ_MODIFY&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_UPDATE
{
	REQ_BASE	base_info;
	SEQ_CHAR	field_value;
	int	buf_size;
	REQ_UPDATE();
	REQ_UPDATE(const REQ_UPDATE&);
	REQ_UPDATE&operator=(const REQ_UPDATE&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_KEY_ERASE
{
	REQ_BASE	base_info;
	SEQ_CHAR	seq_keyword;
	int	keybuf_size;
	REQ_KEY_ERASE();
	REQ_KEY_ERASE(const REQ_KEY_ERASE&);
	REQ_KEY_ERASE&operator=(const REQ_KEY_ERASE&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct DEL_REQ
{
	REQ_BASE	base_info;
	int	del_direction;
	int	del_num;
	SEQ_CHAR	seq_keyword;
	int	keybuf_size;
	DEL_REQ();
	DEL_REQ(const DEL_REQ&);
	DEL_REQ&operator=(const DEL_REQ&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_TABLE_CLEAR
{
	REQ_BASE	base_info;
	REQ_TABLE_CLEAR();
	REQ_TABLE_CLEAR(const REQ_TABLE_CLEAR&);
	REQ_TABLE_CLEAR&operator=(const REQ_TABLE_CLEAR&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_FIELD_BASE_INFO
{
	REQ_BASE	base_info;
	SEQ_LONG	seq_field_no;
	REQ_FIELD_BASE_INFO();
	REQ_FIELD_BASE_INFO(const REQ_FIELD_BASE_INFO&);
	REQ_FIELD_BASE_INFO&operator=(const REQ_FIELD_BASE_INFO&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_FIELD_BASE_INFO
{
	SEQ_FIELD_BASE_INFO	lseq_field_base_info;
	RSP_FIELD_BASE_INFO();
	RSP_FIELD_BASE_INFO(const RSP_FIELD_BASE_INFO&);
	RSP_FIELD_BASE_INFO&operator=(const RSP_FIELD_BASE_INFO&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_PARAMETER
{
	REQ_BASE	base_info;
	MLang::STRING	str_field_list;
	REQ_PARAMETER();
	REQ_PARAMETER(const REQ_PARAMETER&);
	REQ_PARAMETER&operator=(const REQ_PARAMETER&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<FIELD_PARAMETER> SEQ_FIELD_PARAMETER;
struct RSP_PARAMETER
{
	TABLE_PARAMETER	table_para;
	SEQ_FIELD_PARAMETER	seq_field_para;
	RSP_PARAMETER();
	RSP_PARAMETER(const RSP_PARAMETER&);
	RSP_PARAMETER&operator=(const RSP_PARAMETER&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_APP_PARAMETER
{
	int	app_no;
	MLang::STRING	app_name;
	REQ_APP_PARAMETER();
	REQ_APP_PARAMETER(const REQ_APP_PARAMETER&);
	REQ_APP_PARAMETER&operator=(const REQ_APP_PARAMETER&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<TABLE_PARAMETER> SEQ_TABLE_PARAMETER;
struct RSP_APP_PARAMETER
{
	int	app_no;
	MLang::STRING	app_name;
	SEQ_TABLE_PARAMETER	seq_table_para;
	RSP_APP_PARAMETER();
	RSP_APP_PARAMETER(const RSP_APP_PARAMETER&);
	RSP_APP_PARAMETER&operator=(const RSP_APP_PARAMETER&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct TABLE_KEYINFO
{
	short	keyword_len;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<TABLE_KEYINFO> SEQ_TABLE_KEYINFO;
struct RSP_KEYINFO
{
	SEQ_TABLE_KEYINFO	seq_keyinfo;
	RSP_KEYINFO();
	RSP_KEYINFO(const RSP_KEYINFO&);
	RSP_KEYINFO&operator=(const RSP_KEYINFO&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_SQL
{
	REQ_BASE	base_info;
	MLang::STRING	str_select;
	REQ_SQL();
	REQ_SQL(const REQ_SQL&);
	REQ_SQL&operator=(const REQ_SQL&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_MENU
{
	REQ_BASE	base_info;
	MLang::STRING	str_menu_name;
	unsigned char	menu_status;
	REQ_MENU();
	REQ_MENU(const REQ_MENU&);
	REQ_MENU&operator=(const REQ_MENU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct MENU_INFO_STRU
{
	MLang::STRING	menu_name;
	unsigned char	menu_no;
	int	actual_value;
	MLang::STRING	display_value;
	unsigned char	menu_status;
	MLang::STRING	menu_macro_name;
	MENU_INFO_STRU();
	MENU_INFO_STRU(const MENU_INFO_STRU&);
	MENU_INFO_STRU&operator=(const MENU_INFO_STRU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<MENU_INFO_STRU> SEQ_MENU_INFO;
struct RSP_MENU
{
	int	menu_num;
	SEQ_MENU_INFO	seq_menu;
	RSP_MENU();
	RSP_MENU(const RSP_MENU&);
	RSP_MENU&operator=(const RSP_MENU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_RELE_MENU
{
	REQ_BASE	base_info;
	REQ_RELE_MENU();
	REQ_RELE_MENU(const REQ_RELE_MENU&);
	REQ_RELE_MENU&operator=(const REQ_RELE_MENU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct MENU_RELEVANT_STRU
{
	int	table_id;
	short	column_id;
	int	column_value;
	short	r_column_id;
	MLang::STRING	r_menu_name;
	int	default_value;
	MENU_RELEVANT_STRU();
	MENU_RELEVANT_STRU(const MENU_RELEVANT_STRU&);
	MENU_RELEVANT_STRU&operator=(const MENU_RELEVANT_STRU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<MENU_RELEVANT_STRU> SEQ_MENU_RELEVANT;
struct RSP_RELE_MENU
{
	int	menu_num;
	SEQ_MENU_RELEVANT	seq_menu;
	RSP_RELE_MENU();
	RSP_RELE_MENU(const RSP_RELE_MENU&);
	RSP_RELE_MENU&operator=(const RSP_RELE_MENU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_NAME_STRING
{
	short	req_type;
	REQ_BASE	base_info;
	KEYID_STRUCT	keyid_stru;
	MLang::Long	reference_id;
	SEQ_CHAR	seq_keyword;
	int	keybuf_size;
	REQ_NAME_STRING();
	REQ_NAME_STRING(const REQ_NAME_STRING&);
	REQ_NAME_STRING&operator=(const REQ_NAME_STRING&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_NAME_STRING
{
	int	name_len;
	MLang::STRING	ref_string;
	RSP_NAME_STRING();
	RSP_NAME_STRING(const RSP_NAME_STRING&);
	RSP_NAME_STRING&operator=(const RSP_NAME_STRING&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_MULTI_NAME_STRING
{
	short	req_type;
	REQ_BASE	base_info;
	SEQ_KEY_ID	seq_keyid_stru;
	SEQ_APPKEY_ID	seq_appkeyid_stru;
	SEQ_APP_ID	seq_appid_stru;
	SEQ_LONGLONG	seq_id;
	REQ_MULTI_NAME_STRING();
	REQ_MULTI_NAME_STRING(const REQ_MULTI_NAME_STRING&);
	REQ_MULTI_NAME_STRING&operator=(const REQ_MULTI_NAME_STRING&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<RSP_NAME_STRING> SEQ_RSP_NAME_STRING;
struct RSP_MULTI_NAME_STRING
{
	SEQ_RSP_NAME_STRING	seq_name_string;
	RSP_MULTI_NAME_STRING();
	RSP_MULTI_NAME_STRING(const RSP_MULTI_NAME_STRING&);
	RSP_MULTI_NAME_STRING&operator=(const RSP_MULTI_NAME_STRING&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_REF_MENU
{
	REQ_BASE	base_info;
	REQ_REF_MENU();
	REQ_REF_MENU(const REQ_REF_MENU&);
	REQ_REF_MENU&operator=(const REQ_REF_MENU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REF_MENU_STRING
{
	MLang::Long	order_no;
	MLang::STRING	menu_name;
	REF_MENU_STRING();
	REF_MENU_STRING(const REF_MENU_STRING&);
	REF_MENU_STRING&operator=(const REF_MENU_STRING&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<REF_MENU_STRING> SEQ_REF_MENU;
struct RSP_REF_MENU
{
	SEQ_REF_MENU	seq_menu;
	RSP_REF_MENU();
	RSP_REF_MENU(const RSP_REF_MENU&);
	RSP_REF_MENU&operator=(const RSP_REF_MENU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct GRAPH_SIMPLE_REQ
{
	int	order_no;
	MLang::Long	keyword_id;
	short	table_no;
	short	field_no;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct GRAPH_XY_REQ
{
	int	order_no;
	MLang::Long	keyword_id;
	short	table_no;
	short	field_no;
	unsigned char	mode;
	short	data_num;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct GRAPH_FIELD_STRU
{
	int	order_no;
	short	field_no;
	MLang::STRING	field_alias;
	short	rele1_table_no;
	short	rele1_field_no;
	short	rele2_table_no;
	short	rele2_field_no;
	GRAPH_FIELD_STRU();
	GRAPH_FIELD_STRU(const GRAPH_FIELD_STRU&);
	GRAPH_FIELD_STRU&operator=(const GRAPH_FIELD_STRU&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<GRAPH_FIELD_STRU> SEQ_GRAPH_FIELD;
struct GRAPH_LIST_REQ
{
	short	table_no;
	MLang::STRING	condition;
	SEQ_STRING	where_field_seq;
	SEQ_GRAPH_FIELD	seq_field;
	GRAPH_LIST_REQ();
	GRAPH_LIST_REQ(const GRAPH_LIST_REQ&);
	GRAPH_LIST_REQ&operator=(const GRAPH_LIST_REQ&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<GRAPH_SIMPLE_REQ> SEQ_SIMPLE_REQ;
typedef MLang::VECTOR<GRAPH_XY_REQ> SEQ_XY_REQ;
typedef MLang::VECTOR<GRAPH_LIST_REQ> SEQ_LIST_REQ;
struct GRAPH_REAL_REQ
{
	MLang::Long	graph_id;
	int	cal_type;
	SEQ_SIMPLE_REQ	simple_req;
	SEQ_XY_REQ	xy_req;
	SEQ_LIST_REQ	list_req;
	GRAPH_REAL_REQ();
	GRAPH_REAL_REQ(const GRAPH_REAL_REQ&);
	GRAPH_REAL_REQ&operator=(const GRAPH_REAL_REQ&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct GRAPH_REAL_ODB_REQ
{
	REQ_BASE	base_info;
	MLang::Long	graph_id;
	int	cal_type;
	SEQ_SIMPLE_REQ	simple_req;
	SEQ_XY_REQ	xy_req;
	SEQ_LIST_REQ	list_req;
	GRAPH_REAL_ODB_REQ();
	GRAPH_REAL_ODB_REQ(const GRAPH_REAL_ODB_REQ&);
	GRAPH_REAL_ODB_REQ&operator=(const GRAPH_REAL_ODB_REQ&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct GRAPH_SIMPLE_RSP
{
	int	order_no;
	union_data_type	data_value;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct GRAPH_XY_RSP
{
	int	order_no;
	SEQ_FLOAT	seq_data_value;
	GRAPH_XY_RSP();
	GRAPH_XY_RSP(const GRAPH_XY_RSP&);
	GRAPH_XY_RSP&operator=(const GRAPH_XY_RSP&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct ORDER_VALUE
{
	int	order_no;
	SEQ_COMMON_DATA	seq_data_value;
	ORDER_VALUE();
	ORDER_VALUE(const ORDER_VALUE&);
	ORDER_VALUE&operator=(const ORDER_VALUE&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<ORDER_VALUE> SEQ_ORDER_VALUE;
struct GRAPH_LIST_RSP
{
	SEQ_ORDER_VALUE	seq_list;
	GRAPH_LIST_RSP();
	GRAPH_LIST_RSP(const GRAPH_LIST_RSP&);
	GRAPH_LIST_RSP&operator=(const GRAPH_LIST_RSP&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<GRAPH_SIMPLE_RSP> SEQ_SIMPLE_RSP;
typedef MLang::VECTOR<GRAPH_XY_RSP> SEQ_XY_RSP;
typedef MLang::VECTOR<GRAPH_LIST_RSP> SEQ_LIST_RSP;
struct GRAPH_REAL_RSP
{
	MLang::Long	graph_id;
	int	cal_type;
	SEQ_SIMPLE_RSP	simple_rsp;
	SEQ_XY_RSP	xy_rsp;
	SEQ_LIST_RSP	list_rsp;
	GRAPH_REAL_RSP();
	GRAPH_REAL_RSP(const GRAPH_REAL_RSP&);
	GRAPH_REAL_RSP&operator=(const GRAPH_REAL_RSP&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct ORDER_KEY_REQ
{
	int	order_no;
	MLang::Long	key_id;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<ORDER_KEY_REQ> SEQ_ORDER_KEY_REQ;
struct GRAPH_ORDER_KEY_REQ
{
	REQ_BASE	base_info;
	int	app_no;
	MLang::Long	graph_id;
	SEQ_ORDER_KEY_REQ	seq_order_key;
	GRAPH_ORDER_KEY_REQ();
	GRAPH_ORDER_KEY_REQ(const GRAPH_ORDER_KEY_REQ&);
	GRAPH_ORDER_KEY_REQ&operator=(const GRAPH_ORDER_KEY_REQ&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct ORDER_KEY_RSP
{
	int	order_no;
	unsigned char	is_in_app;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<ORDER_KEY_RSP> SEQ_ORDER_KEY_RSP;
struct GRAPH_ORDER_KEY_RSP
{
	MLang::Long	graph_id;
	SEQ_ORDER_KEY_RSP	seq_app;
	GRAPH_ORDER_KEY_RSP();
	GRAPH_ORDER_KEY_RSP(const GRAPH_ORDER_KEY_RSP&);
	GRAPH_ORDER_KEY_RSP&operator=(const GRAPH_ORDER_KEY_RSP&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_ENTITY
{
	REQ_BASE	base_info;
	MLang::STRING	object_name;
	short	object_id;
	unsigned char	object_mode;
	unsigned char	object_eng;
	REQ_ENTITY();
	REQ_ENTITY(const REQ_ENTITY&);
	REQ_ENTITY&operator=(const REQ_ENTITY&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_ENTITY
{
	int	object_no;
	MLang::STRING	object_name;
	RSP_ENTITY();
	RSP_ENTITY(const RSP_ENTITY&);
	RSP_ENTITY&operator=(const RSP_ENTITY&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_FAC
{
	REQ_BASE	base_info;
	int	table_no;
	SEQ_CHAR	seq_keyword;
	int	keybuf_size;
	MLang::Long	fac_no;
	MLang::STRING	fac_name;
	REQ_FAC();
	REQ_FAC(const REQ_FAC&);
	REQ_FAC&operator=(const REQ_FAC&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_FAC
{
	MLang::Long	fac_no;
	MLang::STRING	fac_name;
	RSP_FAC();
	RSP_FAC(const RSP_FAC&);
	RSP_FAC&operator=(const RSP_FAC&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_VAL_STA
{
	short	req_type;
	REQ_BASE	base_info;
	SEQ_KEY_ID	keyid_stru_seq;
	SEQ_KEY_ID_STA	keyid_sta_stru_seq;
	REQ_VAL_STA();
	REQ_VAL_STA(const REQ_VAL_STA&);
	REQ_VAL_STA&operator=(const REQ_VAL_STA&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct TIntValueStatus
{
	int	value;
	int	status;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct TFloatValueStatus
{
	float	value;
	int	status;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct TCharValueStatus
{
	unsigned char	value;
	int	status;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct TLongValueStatus
{
	MLang::Long	value;
	int	status;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct TUnionValueStatus
{
	union_data_type	value;
	int	status;
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
typedef MLang::VECTOR<TIntValueStatus> SEQ_INT_VAL_STA;
typedef MLang::VECTOR<TFloatValueStatus> SEQ_FLOAT_VAL_STA;
typedef MLang::VECTOR<TCharValueStatus> SEQ_CHAR_VAL_STA;
typedef MLang::VECTOR<TLongValueStatus> SEQ_LONG_VAL_STA;
typedef MLang::VECTOR<TUnionValueStatus> SEQ_UNION_VAL_STA;
struct RSP_INT_VAL_STA
{
	SEQ_INT_VAL_STA	rsp_val_sta;
	RSP_INT_VAL_STA();
	RSP_INT_VAL_STA(const RSP_INT_VAL_STA&);
	RSP_INT_VAL_STA&operator=(const RSP_INT_VAL_STA&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_FLOAT_VAL_STA
{
	SEQ_FLOAT_VAL_STA	rsp_val_sta;
	RSP_FLOAT_VAL_STA();
	RSP_FLOAT_VAL_STA(const RSP_FLOAT_VAL_STA&);
	RSP_FLOAT_VAL_STA&operator=(const RSP_FLOAT_VAL_STA&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_CHAR_VAL_STA
{
	SEQ_CHAR_VAL_STA	rsp_val_sta;
	RSP_CHAR_VAL_STA();
	RSP_CHAR_VAL_STA(const RSP_CHAR_VAL_STA&);
	RSP_CHAR_VAL_STA&operator=(const RSP_CHAR_VAL_STA&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_LONG_VAL_STA
{
	SEQ_LONG_VAL_STA	rsp_val_sta;
	RSP_LONG_VAL_STA();
	RSP_LONG_VAL_STA(const RSP_LONG_VAL_STA&);
	RSP_LONG_VAL_STA&operator=(const RSP_LONG_VAL_STA&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_UNION_VAL_STA
{
	SEQ_UNION_VAL_STA	rsp_val_sta;
	RSP_UNION_VAL_STA();
	RSP_UNION_VAL_STA(const RSP_UNION_VAL_STA&);
	RSP_UNION_VAL_STA&operator=(const RSP_UNION_VAL_STA&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct REQ_CON
{
	REQ_BASE	base_info;
	SEQ_FIELD_STRU	get_field_info;
	SEQ_CHAR	con_field_value;
	REQ_CON();
	REQ_CON(const REQ_CON&);
	REQ_CON&operator=(const REQ_CON&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
struct RSP_CON
{
	int	fit_num;
	int	one_fit_size;
	SEQ_CHAR	seq_data;
	int	data_size;
	RSP_CON();
	RSP_CON(const RSP_CON&);
	RSP_CON&operator=(const RSP_CON&);
	void __write(MLang::OutputStream&__os)const;
	void __read(MLang::InputStream&__is);
};
const int FUNC_TABLECREATE_NO = 1;
const int FUNC_TABLEDELETE_NO = 2;
const int FUNC_TABLEGET_NO = 3;
const int FUNC_TABLEGETBYNAME_NO = 4;
const int FUNC_TABLEGETBYFIELDVALUE_NO = 5;
const int FUNC_TABLEWRITE_NO = 6;
const int FUNC_TABLEMODIFY_NO = 7;
const int FUNC_TABLEUPDATE_NO = 8;
const int FUNC_DELETERECORD_NO = 9;
const int FUNC_TABLECLEAR_NO = 10;
const int FUNC_GETTABLEPARA_NO = 11;
const int FUNC_GETTABLEPARAMETER_NO = 12;
const int FUNC_GETAPPTABLEPARAMETER_NO = 13;
const int FUNC_GETFIELDPARA_NO = 14;
const int FUNC_GETKEYINFO_NO = 15;
const int FUNC_TABLEGETBYSQL_NO = 16;
const int FUNC_MENUREAD_NO = 17;
const int FUNC_TABLERELEMENUREAD_NO = 18;
const int FUNC_GETNAMESTRINGBYKEYID_NO = 19;
const int FUNC_GETREFMENUSTRING_NO = 20;
const int FUNC_GETNAMESTRINGBYMULTIKEYID_NO = 21;
const int FUNC_GRAPHGETDATA_NO = 22;
const int FUNC_GRAPHGETAPPINFO_NO = 23;
const int FUNC_EXCHANGENAMENO_NO = 24;
const int FUNC_GETFACNAMEBYKEYNO_NO = 25;
const int FUNC_GETFACNAMEBYFACID_NO = 26;
const int FUNC_GETFACNAMEBYFACNO_NO = 27;
const int FUNC_GETFACIDBYFACNAME_NO = 28;
const int FUNC_GETFACNOBYFACNAME_NO = 29;
const int FUNC_GETFACIDBYFACNO_NO = 30;
const int FUNC_GETFACNOBYFACID_NO = 31;
const int FUNC_GETVALUEANDSTATUS_NO = 32;
const int FUNC_PINGRTDBSERVER_NO = 33;
const int FUNC_DELETERECORDS_NO = 34;
}
#endif
